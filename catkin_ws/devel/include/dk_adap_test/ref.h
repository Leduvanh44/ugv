// Generated by gencpp from file dk_adap_test/ref.msg
// DO NOT EDIT!


#ifndef DK_ADAP_TEST_MESSAGE_REF_H
#define DK_ADAP_TEST_MESSAGE_REF_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Point.h>
#include <geometry_msgs/Point.h>
#include <geometry_msgs/Point.h>

namespace dk_adap_test
{
template <class ContainerAllocator>
struct ref_
{
  typedef ref_<ContainerAllocator> Type;

  ref_()
    : points()
    , vel()
    , accel()  {
    }
  ref_(const ContainerAllocator& _alloc)
    : points(_alloc)
    , vel(_alloc)
    , accel(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector< ::geometry_msgs::Point_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::geometry_msgs::Point_<ContainerAllocator> >> _points_type;
  _points_type points;

   typedef std::vector< ::geometry_msgs::Point_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::geometry_msgs::Point_<ContainerAllocator> >> _vel_type;
  _vel_type vel;

   typedef std::vector< ::geometry_msgs::Point_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::geometry_msgs::Point_<ContainerAllocator> >> _accel_type;
  _accel_type accel;





  typedef boost::shared_ptr< ::dk_adap_test::ref_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::dk_adap_test::ref_<ContainerAllocator> const> ConstPtr;

}; // struct ref_

typedef ::dk_adap_test::ref_<std::allocator<void> > ref;

typedef boost::shared_ptr< ::dk_adap_test::ref > refPtr;
typedef boost::shared_ptr< ::dk_adap_test::ref const> refConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::dk_adap_test::ref_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::dk_adap_test::ref_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::dk_adap_test::ref_<ContainerAllocator1> & lhs, const ::dk_adap_test::ref_<ContainerAllocator2> & rhs)
{
  return lhs.points == rhs.points &&
    lhs.vel == rhs.vel &&
    lhs.accel == rhs.accel;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::dk_adap_test::ref_<ContainerAllocator1> & lhs, const ::dk_adap_test::ref_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace dk_adap_test

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::dk_adap_test::ref_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::dk_adap_test::ref_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::dk_adap_test::ref_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::dk_adap_test::ref_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::dk_adap_test::ref_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::dk_adap_test::ref_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::dk_adap_test::ref_<ContainerAllocator> >
{
  static const char* value()
  {
    return "77379297565095d4368ccb556eb253fa";
  }

  static const char* value(const ::dk_adap_test::ref_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x77379297565095d4ULL;
  static const uint64_t static_value2 = 0x368ccb556eb253faULL;
};

template<class ContainerAllocator>
struct DataType< ::dk_adap_test::ref_<ContainerAllocator> >
{
  static const char* value()
  {
    return "dk_adap_test/ref";
  }

  static const char* value(const ::dk_adap_test::ref_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::dk_adap_test::ref_<ContainerAllocator> >
{
  static const char* value()
  {
    return "geometry_msgs/Point[] points\n"
"geometry_msgs/Point[] vel\n"
"geometry_msgs/Point[] accel\n"
"\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
;
  }

  static const char* value(const ::dk_adap_test::ref_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::dk_adap_test::ref_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.points);
      stream.next(m.vel);
      stream.next(m.accel);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ref_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::dk_adap_test::ref_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::dk_adap_test::ref_<ContainerAllocator>& v)
  {
    s << indent << "points[]" << std::endl;
    for (size_t i = 0; i < v.points.size(); ++i)
    {
      s << indent << "  points[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "    ", v.points[i]);
    }
    s << indent << "vel[]" << std::endl;
    for (size_t i = 0; i < v.vel.size(); ++i)
    {
      s << indent << "  vel[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "    ", v.vel[i]);
    }
    s << indent << "accel[]" << std::endl;
    for (size_t i = 0; i < v.accel.size(); ++i)
    {
      s << indent << "  accel[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "    ", v.accel[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // DK_ADAP_TEST_MESSAGE_REF_H
